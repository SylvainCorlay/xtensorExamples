// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/xtensorExamples_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// ex1
xt::rxarray<double> ex1(bool verbose);
RcppExport SEXP xtensorExamples_ex1(SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ex1(verbose));
    return rcpp_result_gen;
END_RCPP
}
// ex2
xt::rxarray<double> ex2(bool verbose);
RcppExport SEXP xtensorExamples_ex2(SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ex2(verbose));
    return rcpp_result_gen;
END_RCPP
}
// ex3
xt::rxarray<int> ex3(xt::rxarray<int> a);
RcppExport SEXP xtensorExamples_ex3(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< xt::rxarray<int> >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(ex3(a));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"xtensorExamples_ex1", (DL_FUNC) &xtensorExamples_ex1, 1},
    {"xtensorExamples_ex2", (DL_FUNC) &xtensorExamples_ex2, 1},
    {"xtensorExamples_ex3", (DL_FUNC) &xtensorExamples_ex3, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_xtensorExamples(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
